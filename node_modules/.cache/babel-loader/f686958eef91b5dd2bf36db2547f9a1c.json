{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Downloads/react_game_KHALLOUK_ALOUI_MAKOUAR/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nimport useSound from 'use-sound';\nimport hurtSfx from './hurt.mp3';\nimport { useParams } from \"react-router-dom\";\nimport './game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sleep(time) {\n  return new Promise(resolve => setTimeout(resolve, time));\n}\n\nconst Game = () => {\n  _s();\n\n  const ONGOING = 0;\n  const PLAYERDIED = -1;\n  const FINISHED = 1;\n  const AIR = 0;\n  const PLAYER = useParams().choice;\n  const ENEMY = 2;\n  const WALL = 5;\n  const width = 7;\n  const height = 10;\n  const [board, setBoard] = useState([]);\n  const [playHurt] = useSound(hurtSfx, {\n    volume: 0.25\n  });\n  let player = useRef({\n    x: Math.floor(height / 2),\n    y: Math.floor(width / 2)\n  });\n  let enemies = useRef([{\n    x: 0,\n    y: Math.floor(width / 2)\n  }]);\n  let boardBuf = useRef([]);\n  let counter = useRef(0);\n  let timer = useRef(15);\n  let level = useRef(1);\n  let lives = useRef(3); //*The gameState can be one of the following:\n  //*onGoing : game is still running\n  //*playerDied : game over, player ran out of lives\n  //*finished : game over, player reached the goal\n\n  let gameState = useRef(ONGOING);\n\n  if (localStorage.getItem(\"highscore\") === null) {\n    localStorage.setItem(\"highscore\", 0);\n  } else {\n    localStorage.setItem(\"highscore\", Math.max(localStorage.getItem(\"highscore\"), level.current - 1));\n  }\n\n  const handleKeyPress = event => {\n    if (event.key === \"ArrowDown\" && player.current.x < height - 1) {\n      player.current.x += 1;\n    } else if (event.key === \"ArrowUp\" && player.current.x > 0) {\n      player.current.x -= 1;\n    } else if (event.key === \"ArrowRight\" && player.current.y < width - 2) {\n      player.current.y += 1;\n    } else if (event.key === \"ArrowLeft\" && player.current.y > 1) {\n      player.current.y -= 1;\n    }\n  }; //*The board is filled with one of these values:\n  //*0 : air\n  //*1 : player\n  //*2 : enemy\n  //*5 : wall\n\n\n  const drawBoard = () => {\n    //init board with air\n    boardBuf.current = [];\n\n    for (let i = 0; i < height; i++) {\n      let buf = [];\n\n      for (let j = 0; j < width; j++) {\n        buf.push(AIR);\n      }\n\n      boardBuf.current.push(buf);\n    } //fill in walls\n\n\n    boardBuf.current.forEach(elem => {\n      elem[0] = WALL;\n      elem[elem.length - 1] = WALL;\n    }); //fill the player in\n\n    if (player.current.x < height) {\n      boardBuf.current[player.current.x][player.current.y] = PLAYER;\n    } //fill enemies in\n\n\n    if (enemies.current.length) {\n      enemies.current.forEach(enemy => {\n        boardBuf.current[enemy.x][enemy.y] = ENEMY;\n      });\n    }\n  };\n\n  const calculateEnemyPositions = c => {\n    //clear enemies that reached the bottom row\n    enemies.current = enemies.current.filter(enemy => enemy.x !== height); //generate new enemy position\n\n    let newY = Math.ceil(Math.random() * 10 % width);\n\n    while (newY === 0 || newY >= width - 1) {\n      newY = Math.ceil(Math.random() * 10 % width);\n    }\n\n    if (!(c % 40)) {\n      enemies.current.push({\n        x: 0,\n        y: newY\n      });\n    }\n  };\n\n  const scrollBoard = c => {\n    if (!(c % (22 - 2 * level.current))) {\n      player.current.x++;\n      enemies.current.forEach(enemy => {\n        enemy.x++;\n      });\n    }\n\n    if (!(c % 40)) {\n      timer.current--;\n    }\n  };\n\n  const checkCollisions = () => {\n    let collisions = enemies.current.filter(enemy => enemy.x === player.current.x && enemy.y === player.current.y);\n    enemies.current = enemies.current.filter(enemy => !(enemy.x === player.current.x && enemy.y === player.current.y));\n\n    if (collisions.length) {\n      lives.current--;\n      playHurt();\n      document.querySelector('.game').style.animation = \"shake 0.1s linear 2\";\n      sleep(500).then(() => {\n        document.querySelector('.game').removeAttribute('style');\n      });\n    }\n  };\n\n  const squareClass = square => {\n    switch (square) {\n      case PLAYER:\n        return \"square player\" + PLAYER + \"Square\";\n\n      case ENEMY:\n        return \"square enemySquare\";\n\n      case WALL:\n        return \"square wallSquare\";\n\n      case AIR:\n        return \"square airSquare\";\n\n      default:\n        break;\n    }\n  };\n\n  const tryAgain = () => {\n    // gameState.current = ONGOING;\n    // player.current = {\n    //     x: Math.floor(height / 2),\n    //     y: Math.floor(width / 2)\n    // };\n    // enemies.current = [];\n    // lives.current = 3;\n    // boardBuf.current = [];\n    // counter.current = 0;\n    // timer.current = 30;\n    // level.current = 1;\n    // setBoard(boardBuf.current);\n    window.location.reload(true);\n  };\n\n  const advanceLevel = () => {\n    level.current++;\n    gameState.current = ONGOING;\n    player.current = {\n      x: Math.floor(height / 2),\n      y: Math.floor(width / 2)\n    };\n    enemies.current = [];\n    boardBuf.current = [];\n    counter.current = 0;\n    timer.current = 20;\n    setBoard(boardBuf.current);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress);\n  }, []);\n  useEffect(() => {\n    setTimeout(() => {\n      drawBoard();\n      counter.current = counter.current + 1;\n      scrollBoard(counter.current);\n\n      if (gameState.current !== ONGOING) {\n        return;\n      }\n\n      if (player.current.x < 0 || player.current.x >= height || !lives.current) {\n        gameState.current = PLAYERDIED;\n\n        if (!lives.current) {\n          drawBoard();\n        }\n      } else if (!timer.current) {\n        gameState.current = FINISHED;\n        setBoard(boardBuf.current);\n      }\n\n      calculateEnemyPositions(counter.current);\n      checkCollisions();\n      setBoard(boardBuf.current);\n    }, 1000 / 60);\n  }, [counter.current]);\n\n  if (gameState.current === PLAYERDIED) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameOver\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \":(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You Died!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: tryAgain,\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this);\n  } else if (gameState.current === FINISHED) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nextLevel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Great work\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: advanceLevel,\n        children: \"Next Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Remaining Time : \", timer.current]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"lives : \", lives.current]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this), boardBuf.current.map((k, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\",\n      children: k.map((s, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: squareClass(s)\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }, this))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Level: \", level.current]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"HighScore: \", localStorage.getItem('highscore')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 14\n  }, this);\n};\n\n_s(Game, \"eyMu5Tdt5bXd07Ka05I5ZRUDuFw=\", false, function () {\n  return [useParams, useSound];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/mac/Downloads/react_game_KHALLOUK_ALOUI_MAKOUAR/src/components/Game.js"],"names":["useEffect","useRef","useState","useSound","hurtSfx","useParams","sleep","time","Promise","resolve","setTimeout","Game","ONGOING","PLAYERDIED","FINISHED","AIR","PLAYER","choice","ENEMY","WALL","width","height","board","setBoard","playHurt","volume","player","x","Math","floor","y","enemies","boardBuf","counter","timer","level","lives","gameState","localStorage","getItem","setItem","max","current","handleKeyPress","event","key","drawBoard","i","buf","j","push","forEach","elem","length","enemy","calculateEnemyPositions","c","filter","newY","ceil","random","scrollBoard","checkCollisions","collisions","document","querySelector","style","animation","then","removeAttribute","squareClass","square","tryAgain","window","location","reload","advanceLevel","addEventListener","map","k","s"],"mappings":"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","sourcesContent":["import {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from 'react'\r\n\r\nimport useSound from 'use-sound';\r\nimport hurtSfx from './hurt.mp3';\r\nimport { useParams } from \"react-router-dom\";\r\nimport './game.css';\r\n\r\nfunction sleep(time){\r\n    return new Promise((resolve)=>setTimeout(resolve,time)\r\n  )\r\n}\r\n\r\nconst Game = () => {\r\n    const ONGOING = 0;\r\n    const PLAYERDIED = -1;\r\n    const FINISHED = 1;\r\n    const AIR = 0;\r\n    const PLAYER = useParams().choice;\r\n    const ENEMY = 2;\r\n    const WALL = 5;\r\n    const width = 7;\r\n    const height = 10;\r\n    const [board ,setBoard] = useState([]);\r\n    const [playHurt] = useSound(hurtSfx, {volume: 0.25});\r\n\r\n    \r\n    let player = useRef({\r\n        x: Math.floor(height / 2),\r\n        y: Math.floor(width / 2)\r\n    });\r\n    let enemies = useRef([{\r\n        x: 0,\r\n        y: Math.floor(width / 2)\r\n    }]);\r\n\r\n    let boardBuf = useRef([]);\r\n    let counter = useRef(0);\r\n    let timer = useRef(15);\r\n    let level = useRef(1);\r\n    let lives = useRef(3);\r\n\r\n    //*The gameState can be one of the following:\r\n    //*onGoing : game is still running\r\n    //*playerDied : game over, player ran out of lives\r\n    //*finished : game over, player reached the goal\r\n    let gameState = useRef(ONGOING);\r\n\r\n    if(localStorage.getItem(\"highscore\")===null){\r\n        localStorage.setItem(\"highscore\",0)\r\n    }else{\r\n        localStorage.setItem(\"highscore\", Math.max(localStorage.getItem(\"highscore\"),level.current-1))\r\n    }\r\n    const handleKeyPress = (event) => {\r\n        if (event.key === \"ArrowDown\" && player.current.x<height-1){\r\n            player.current.x += 1;\r\n        }else if(event.key === \"ArrowUp\" && player.current.x>0){\r\n            player.current.x -= 1;\r\n        }else if(event.key === \"ArrowRight\" && player.current.y<width-2){\r\n            player.current.y += 1;\r\n        }else if(event.key === \"ArrowLeft\" && player.current.y>1){\r\n            player.current.y -= 1;\r\n        }\r\n    }\r\n\r\n    //*The board is filled with one of these values:\r\n    //*0 : air\r\n    //*1 : player\r\n    //*2 : enemy\r\n    //*5 : wall\r\n\r\n    const drawBoard = () => {\r\n        //init board with air\r\n        boardBuf.current = [];\r\n        for (let i = 0; i < height; i++) {\r\n            let buf = []\r\n            for (let j = 0; j < width; j++) {\r\n                buf.push(AIR);\r\n            }\r\n            boardBuf.current.push(buf);\r\n        }\r\n\r\n        //fill in walls\r\n        boardBuf.current.forEach((elem) => {\r\n            elem[0] = WALL;\r\n            elem[elem.length - 1] = WALL;\r\n        });\r\n\r\n        //fill the player in\r\n        if (player.current.x<height) {\r\n            boardBuf.current[player.current.x][player.current.y] = PLAYER;\r\n        }\r\n\r\n        //fill enemies in\r\n        if(enemies.current.length){\r\n            enemies.current.forEach((enemy) => {\r\n                boardBuf.current[enemy.x][enemy.y] = ENEMY;\r\n            })\r\n        }\r\n    }\r\n\r\n    const calculateEnemyPositions = (c) => {\r\n        //clear enemies that reached the bottom row\r\n        enemies.current = enemies.current.filter((enemy) => enemy.x!==height)\r\n\r\n        //generate new enemy position\r\n        let newY = Math.ceil((Math.random()*10)%width)\r\n        while (newY===0 || newY>=width-1){\r\n            newY = Math.ceil((Math.random()*10)%width)\r\n        }\r\n        if(!(c%40)){\r\n            enemies.current.push({x: 0, y:newY})\r\n        }\r\n    }\r\n\r\n    const scrollBoard = (c) => {\r\n        if (!(c%(22-(2*level.current)))) {\r\n            player.current.x++;\r\n            enemies.current.forEach((enemy) =>{\r\n                enemy.x++;\r\n            })\r\n        }\r\n        if(!(c%40)){\r\n            timer.current--;\r\n        }\r\n        \r\n    }\r\n\r\n    const checkCollisions = () => {\r\n        let collisions = enemies.current.filter((enemy) => enemy.x === player.current.x && enemy.y === player.current.y);\r\n        enemies.current = enemies.current.filter((enemy) => !(enemy.x === player.current.x && enemy.y === player.current.y));\r\n        if(collisions.length){\r\n            lives.current--;\r\n            playHurt();\r\n            document.querySelector('.game').style.animation=\"shake 0.1s linear 2\";\r\n            sleep(500).then(()=>{\r\n                document.querySelector('.game').removeAttribute('style');\r\n            })\r\n        }\r\n    }\r\n\r\n    const squareClass = (square) => {\r\n        switch (square) {\r\n            case PLAYER:\r\n                return \"square player\"+PLAYER+\"Square\";\r\n            case ENEMY:\r\n                return \"square enemySquare\";\r\n            case WALL:\r\n                return \"square wallSquare\";\r\n            case AIR:\r\n                return \"square airSquare\"\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const tryAgain = () =>{\r\n        // gameState.current = ONGOING;\r\n        // player.current = {\r\n        //     x: Math.floor(height / 2),\r\n        //     y: Math.floor(width / 2)\r\n        // };\r\n        // enemies.current = [];\r\n        // lives.current = 3;\r\n        // boardBuf.current = [];\r\n        // counter.current = 0;\r\n        // timer.current = 30;\r\n        // level.current = 1;\r\n        // setBoard(boardBuf.current);\r\n        window.location.reload(true);\r\n    }\r\n\r\n    const advanceLevel = () => {\r\n        level.current++;\r\n        gameState.current = ONGOING;\r\n        player.current = {\r\n            x: Math.floor(height / 2),\r\n            y: Math.floor(width / 2)\r\n        };\r\n        enemies.current = [];\r\n        boardBuf.current = [];\r\n        counter.current = 0;\r\n        timer.current = 20;\r\n        setBoard(boardBuf.current);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleKeyPress);\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            drawBoard();\r\n            counter.current = counter.current+1;\r\n            scrollBoard(counter.current);\r\n            if (gameState.current !== ONGOING) {\r\n                return;\r\n            }\r\n            if (player.current.x<0 || player.current.x>=height || !lives.current) {\r\n                gameState.current = PLAYERDIED;\r\n                if (!lives.current) {\r\n                    drawBoard();\r\n                }\r\n            }else if(!timer.current){\r\n                gameState.current = FINISHED;\r\n                setBoard(boardBuf.current);\r\n            }\r\n            calculateEnemyPositions(counter.current);\r\n            checkCollisions();\r\n            setBoard(boardBuf.current);\r\n        }, 1000/60);\r\n    },[counter.current]);\r\n\r\n    if (gameState.current === PLAYERDIED){\r\n        return (\r\n            <div className=\"gameOver\">\r\n                <h3>:(</h3>\r\n                <p>You Died!</p>\r\n                <button onClick={tryAgain}>Try Again</button>\r\n            </div>\r\n        )\r\n    }else if(gameState.current === FINISHED){\r\n        return (\r\n            <div className=\"nextLevel\">\r\n                {/* <h3>:D</h3> */}\r\n                <h3>Great work</h3>\r\n                <button onClick={advanceLevel}>Next Level</button>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n\r\n    return ( <div className = \"game\">\r\n        <h1>Remaining Time : {timer.current}</h1>\r\n        <h2>lives : {lives.current}</h2>\r\n        {boardBuf.current.map((k, i)=>\r\n            <div className=\"line\" key={i}>\r\n                {k.map((s, j) => \r\n                    <div className={squareClass(s)} key={j}>\r\n                        {/* {s} */}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )}\r\n        <h2>Level: {level.current}</h2>\r\n        <h2>HighScore: {localStorage.getItem('highscore')}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}